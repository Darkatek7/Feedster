@page "/"
@page "/{groupId:int}"
@page "/feed/{feedId:int}"
@inject ArticleRepository _articleRepo
@inject GroupRepository _groupRepo
@inject FeedRepository _feedRepo

<PageTitle>Feedster - Home</PageTitle>
<h5 class="mb-2 font-bold tracking-tight dark:text-white" style="font-size: 3.5em">@(_group is null ? "Home" : _group.Name)</h5>

<!-- Feed controls  -->
@if (groupId is not null)
{
    <div class="inline-flex rounded-md shadow-sm mb-4" role="group">
        <button type="button" class="inline-flex items-center py-2 px-4 text-sm font-medium text-gray-900 bg-transparent rounded-l-lg border border-gray-900 hover:bg-gray-900 hover:text-white focus:z-10 focus:ring-2 focus:ring-gray-500 focus:bg-gray-900 focus:text-white dark:border-white dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:bg-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12.75 19.5v-.75a7.5 7.5 0 00-7.5-7.5H4.5m0-6.75h.75c7.87 0 14.25 6.38 14.25 14.25v.75M6 18.75a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" />
            </svg>
            Manage Feeds
        </button>
        <button type="button" class="inline-flex items-center py-2 px-4 text-sm font-medium text-gray-900 bg-transparent border-t border-b border-gray-900 hover:bg-gray-900 hover:text-white focus:z-10 focus:ring-2 focus:ring-gray-500 focus:bg-gray-900 focus:text-white dark:border-white dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:bg-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
            </svg>
            Rename
        </button>
        <button type="button" class="inline-flex items-center py-2 px-4 text-sm font-medium text-gray-900 bg-transparent rounded-r-md border border-gray-900 hover:bg-gray-900 hover:text-white focus:z-10 focus:ring-2 focus:ring-gray-500 focus:bg-gray-900 focus:text-white dark:border-white dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:bg-gray-700">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
            </svg>
            Delete
        </button>
    </div>
    <br/>
}

@if (!_articles.Any())
{
    <a>No articles found...</a>
}
else
{
    <div>
        @foreach (var article in _articles.OrderByDescending(a => a.PublicationDate))
        {
            <div class="mb-4 ">
                <a href="@article.ArticleLink" target="_blank" style="min-width: 20em;" class="transition hover:bg-gray-200 block p-6 bg-gray-100 max-w-screen-sm rounded-lg border border-gray-400 shadow-xl hover:bg-gray-200 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                    @if (File.Exists("images/" + article.ImagePath))
                    {
                        <img src="@("/images/" + article.ImagePath)" class="rounded max-w-50 mb-2" alt="article image">
                    }
                    <p class="text-sm top-0 mb-2">@article.Feed.Name • @Convert.ToDateTime(article.PublicationDate).ToString("g")</p>
                    <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">@article.Title</h5>
                    @if (article.Description is not null)
                    {
                        <p class="mb-2 font-normal text-gray-700 dark:text-gray-400">@article.Description</p>
                    }
                    @if(article.Tags.Count() != 0)
                    {
                        foreach (var cat in article.Tags.Distinct())
                        {
                            <a class="p-2 text-sm text-gray-500 rounded bg-gray-200 mr-1">#@cat</a>
                        }
                    }
                </a>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int? groupId { get; set; }
    
    [Parameter]
    public int? feedId { get; set; }
    
    private List<Article> _articles = new();
    private Group? _group;
    private Feed? _feed;

    protected override async Task OnInitializedAsync()
    {
        switch ((groupId, feedId))
        {
            case (null, null):
                // Home page
                _articles = (await _articleRepo.GetAll()).OrderByDescending(x => x.PublicationDate).ToList();
                break;
            case (not null, null) :
                // Group is displayed
                await LoadGroup((int)groupId);
                _articles = (await _articleRepo.GetFromGroupId((int)groupId)).OrderByDescending(x => x.PublicationDate).ToList();
                break;
            case (null, not null):
                // specific feed is displayed
                _feed = await _feedRepo.Get((int) feedId);
                _articles = _feed.Articles.OrderByDescending(x => x.PublicationDate).ToList();
                break;
        }
    }
    private async Task LoadGroup(int grpId)
    {
        _group = await _groupRepo.Get(grpId);
    }
}
@page "/"
@page "/{groupId:int}"
@page "/feed/{feedId:int}"
@inject ArticleRepository _articleRepo
@inject GroupRepository _groupRepo
@inject FeedRepository _feedRepo

<PageTitle>Feedster - Home</PageTitle>
<h5 class="mb-2 font-bold tracking-tight dark:text-white" style="font-size: 3.5em">@(_group is null ? "Home" : _group.Name)</h5>

@if (!_articles.Any())
{
    <a>No articles found...</a>
}
else
{
    <div>
        @foreach (var article in _articles.OrderByDescending(a => a.PublicationDate))
        {
            <div class="mb-4 ">
                <a href="@article.ArticleLink" target="_blank" style="min-width: 20em;" class="transition hover:bg-gray-200 block p-6 bg-gray-100 max-w-screen-sm rounded-lg border border-gray-400 shadow-xl hover:bg-gray-200 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                    @if (File.Exists("images/" + article.ImagePath))
                    {
                        <img src="@("/images/" + article.ImagePath)" class="rounded max-w-50 mb-2" alt="article image">
                    }
                    <p class="text-sm top-0 mb-2">@article.Feed.Name • @Convert.ToDateTime(article.PublicationDate).ToString("g")</p>
                    <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">@article.Title</h5>
                    @if (article.Description is not null)
                    {
                        <p class="mb-2 font-normal text-gray-700 dark:text-gray-400">@article.Description</p>
                    }
                    @if(article.Tags.Count() != 0)
                    {
                        foreach (var cat in article.Tags.Distinct())
                        {
                            <a class="p-2 text-sm text-gray-500 rounded bg-gray-200 mr-1">#@cat</a>
                        }
                    }
                </a>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int? groupId { get; set; }
    
    [Parameter]
    public int? feedId { get; set; }
    
    private List<Article> _articles = new();
    private Group? _group;
    private Feed? _feed;

    protected override async Task OnInitializedAsync()
    {
        switch ((groupId, feedId))
        {
            case (null, null):
                // Home page
                _articles = (await _articleRepo.GetAll()).OrderByDescending(x => x.PublicationDate).ToList();
                break;
            case (not null, null) :
                await LoadGroup((int)groupId);
                _articles = (await _articleRepo.GetFromGroupId((int)groupId)).OrderByDescending(x => x.PublicationDate).ToList();
                break;
            case (null, not null):
                _feed = await _feedRepo.Get((int) feedId);
                _articles = _feed.Articles.OrderByDescending(x => x.PublicationDate).ToList();
                break;
        }
    }
    private async Task LoadGroup(int grpId)
    {
        _group = await _groupRepo.Get(grpId);
    }
}
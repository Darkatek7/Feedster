@page "/"
@using Feedster.DAL.Services
@using Feed = Feedster.DAL.Models.Feed
@using Feedster.DAL.Repositories
@using Feedster.DAL.Models
@inject RssFetchService _fetchService
@inject FeedRepository _feedRepo
@inject ArticleRepository _articleRepo

<PageTitle>Feedster - Home</PageTitle>

@if(_articles is not null){
    <h5 class="mb-2 text-2xl font-bold tracking-tight dark:text-white">Home</h5>
    <button class="btn btn-primary" @onclick=Load>LOAD</button>

    <div>
            @foreach (var article in _articles.OrderByDescending(a => a.PublicationDate))
            {
                <div class="mb-4 ">
                    <a href="@article.ArticleLink" target="_blank" style="min-width: 20em;" class="hover:-translate-y-1 hover:scale-105 transition hover:bg-gray-200 block p-6 bg-gray-100 max-w-screen-sm rounded-lg border border-gray-400 shadow-xl hover:bg-gray-200 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                        @if (!String.IsNullOrEmpty(article.ImageUrl))
                        {
                            <img src="@article.ImageUrl" class="rounded max-w-50 mb-2" alt="article image">
                        }
                        <p class="text-sm top-0 mb-2">@article.Feed.Name • @(article.PublicationDate)</p>
                        <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">@article.Title</h5>
                        @if (article.Description is not null)
                        {
                            <p class="mb-2 font-normal text-gray-700 dark:text-gray-400">@article.Description</p>
                        }
                        @if(article.Tags.Count() != 0)
                        {
                            @foreach (var cat in article.Tags.Distinct())
                            {
                                <a class="p-2 text-sm text-gray-500 rounded bg-gray-200 me-1">#@cat</a>
                            }
                        }
                    </a>
                </div>
            }
    </div>
}

@code {

    private List<Article> _articles;

    protected override async Task OnInitializedAsync()
    {
        _articles = await _articleRepo.GetAll();
    }

    private async Task Load()
    {
        await _fetchService.RefreshFeeds();
    }


}